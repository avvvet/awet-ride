{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["PickUp","lazy","Promise","all","__webpack_require__","e","then","bind","DriverPage","DriverLogin","RiderLogin","AdminLogin","ControlPanel","Playground","Notes","Msg","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","lat","lng","zoom","react_default","a","createElement","react_router_dom","react","fallback","id","className","Image","src","height","centered","Label","color","pointing","react_router","path","component","exact","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e884072e.chunk.js","sourcesContent":["import React, { Component, Suspense, lazy } from 'react';\nimport { render } from 'react-dom';\nimport {BrowserRouter, Route, Switch} from 'react-router-dom';\nimport {Image, Label} from 'semantic-ui-react'\nimport './App.css';\nimport './routing_machine.css';\n\n// import PickUp from './components/pick_up';\n// import DriverPage from './components/driver/driver_page';\n// import DriverLogin from './components/driver/login';\n// import RiderLogin from './components/rider/login';\n// import AdminLogin from './components/admin/admin_login';\n// import ControlPanel from './components/admin/control_panel';\n// import Playground from './components/playground';\n// import Notes from './components/driver/note';\n// import Msg from './components/driver/msg';\nconst PickUp = lazy(() => import('./components/pick_up'));\nconst DriverPage = lazy(() => import('./components/driver/driver_page'));\nconst DriverLogin = lazy(() => import('./components/driver/login'));\nconst RiderLogin = lazy(() => import('./components/rider/login'));\nconst AdminLogin = lazy(() => import('./components/admin/admin_login'));\nconst ControlPanel = lazy(() => import('./components/admin/control_panel'));\nconst Playground = lazy(() => import('./components/playground'));\nconst Notes = lazy(() => import('./components/driver/note'));\nconst Msg = lazy(() => import('./components/driver/msg'));\n\nclass App extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      lat: 9.0089,\n      lng: 38.7629,\n      zoom: 16\n    }\n  }\n\n  render() {\n    const position = [this.state.lat, this.state.lng];\n    const positionTwo = [9.0092, 38.7645];\n    \n    return (\n     \n      <div>\n        <BrowserRouter>\n          <div>\n          <Suspense fallback={<div id=\"div-boot\" className=\"div-boot\">\n            <Image src='/assets/nile_ride_logo_blue.png' height={75} centered></Image> \n            <Label color=\"black\" pointing=\"above\">Loading...</Label>\n          </div>}>\n            <Switch>\n                <Route path=\"/\" component={PickUp} exact />\n                <Route path=\"/user/login\" component={RiderLogin} exact/>\n                <Route path=\"/user\" component={PickUp} exact/>\n                <Route path=\"/driver\" component={DriverPage} exact/>\n                <Route path=\"/driver/login\" component={DriverLogin} exact/>\n                <Route path=\"/admin\" component={AdminLogin} exact />\n                <Route path=\"/admin/control_panel\" component={ControlPanel} exact />\n                <Route path=\"/playground\" component={Playground} exact />\n                <Route path=\"/notes\" component={Notes} exact />\n                <Route path=\"/msg\" component={Msg} exact />\n            </Switch>\n            </Suspense>\n          </div>\n        </BrowserRouter>  \n        \n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\n//serviceWorker.unregister();\nserviceWorker.unregister();\n"],"sourceRoot":""}